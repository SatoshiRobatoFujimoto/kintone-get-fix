<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="508" y="138">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="135" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="kintone GET" id="4" localization="8" tooltip="This is a sample box to get records from kintone." x="351" y="141">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import urllib2
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)


    def getReq(self,p) :
        try:
            def downloadFile(fileFieldData):
                extention = fileFieldData['contentType'].split('/')[1]
                fileName = fileFieldData['name']
                fileKey = fileFieldData['fileKey']

                urlForFile = url + '/k/v1/file.json?fileKey=' + fileKey
                request = urllib2.Request(urlForFile)
                request.add_header('X-Cybozu-API-Token', apiToken)
                response = urllib2.urlopen(request)

                file = open('/../..' + downloadDir + fileName, 'wb')
                file.write(response.read())
                file.close()


            #Make List like [{record1}, {record2}] from multi records
            def makeRecordsDictList(responseRecords, requestFieldsList):
                recordDatum = []

                for record in responseRecords:
                    data = {}

                    #Store values of each fields
                    for field in requestFieldsList:
                        fieldData = record[field]
                        fieldType = fieldData['type']


                        if fieldType == 'FILE':
                            fileData = fieldData['value'][0]

                            downloadFile(fileData)

                            fileName = fileData['name'].encode('utf_8')
                            data[field] = fileName


                        elif fieldType == 'SUBTABLE':
                            tableRecords = []
                            for tableRecord in fieldData['value']:
                                tableRecords.append(tableRecord['value'])

                            data[field] = makeRecordsDictList(tableRecords, tableFields)


                        else:
                            fieldValue = record[field]['value'].encode('utf_8')
                            data[field] = fieldValue


                    recordDatum.append(data)

                return recordDatum


            #Set parameters
            url = 'https://' + self.getParameter('sub-domain') + '.cybozu.com'

            urlForGet = url + '/k/v1/records.json'
            app = self.getParameter('app-no')
            apiToken = self.getParameter('API-Token')
            downloadDir = self.getParameter('directory')

            #query = self.getParameter('query')
            query = 'qrid="'+p+'"'
            queryStr= urllib2.quote(query)


            #Make fieldStr
            fields = self.getParameter('fields').split(';')
            fieldsStr = ''
            tableFields = []

            for i,field in enumerate(fields):
                s = field.find('(')
                if s != -1:
                    f = field.find(')')
                    tableFields = field[s+1:f].split(',')
                    field = field[0:s]
                fields[i] = field
                fieldsStr += '&fields' + urllib2.quote('[' + repr(i) + ']') + '=' + urllib2.quote(field)


            #Send request
            urlForGet += '?app=' + app + '&query=' + queryStr + fieldsStr
            request = urllib2.Request(urlForGet)
            request.add_header('X-Cybozu-API-Token', apiToken)
            response = urllib2.urlopen(request)


            #Make output
            responseJson = json.loads(response.read())
            responseData = makeRecordsDictList(responseJson['records'], fields)
            responseJsonData = json.dumps(responseData)

            self.logger.debug(responseJsonData)
            self.onStopped(responseJsonData)


        except urllib2.URLError, message:
            self.logger.debug(message)
            self.onFailed(message)

        except IndexError:
            self.onFailed("x")



    def onLoad(self,p):
        pass


    def onUnload(self,p):
        pass


    def onInput_onStart(self,p):
        self.getReq(str(p))


    def onInput_onStop(self):
        self.getReq()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="onFailed" type="3" type_size="1" nature="2" inner="0" tooltip="Outputted error when script is failed." id="5" />
                            <Parameter name="sub-domain" inherits_from_parent="0" content_type="3" value="" default_value="example" custom_choice="0" tooltip='If kintone URL is &quot;https://example.cybozu.com&quot;, sub-domain is &quot;example&quot;.' id="6" />
                            <Parameter name="app-no" inherits_from_parent="0" content_type="3" value="" default_value="1" custom_choice="0" tooltip='This is a number of kintone-app. &#x0A;If URL is &quot;https://example.cybozu.com/k/1/&quot;, app-number is 1.' id="7" />
                            <Parameter name="API-Token" inherits_from_parent="0" content_type="3" value="" default_value="token" custom_choice="0" tooltip="This is a string that is needed for authentication. &#x0A;You need to set API-Token on App Setting page in kintone." id="8" />
                            <Parameter name="fields" inherits_from_parent="0" content_type="3" value="" default_value="date;kondate" custom_choice="0" tooltip="This is a list of fields to get.&#x0A;An example is here.&#x0A;string;number;table(string,number)" id="9" />
                            <Parameter name="directory" inherits_from_parent="0" content_type="3" value="/tmp" default_value="/tmp" custom_choice="0" tooltip="This is a directory whiere download files.&#x0A;Write a directory with full path.&#x0A;An example is here.&#x0A;/home/nao/cybozu/" id="10" />
                        </Box>
                        <Box name="Quety Edit" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="71" y="149">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("ここにクエリ文字列を書く")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[ここにクエリ文字列を書く]]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                        </Box>
                        <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
